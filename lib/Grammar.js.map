{"version":3,"sources":["Grammar.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;AAAA;AAAA,MAAA,iEAAA;IAAA;;;EAgBA,aAAA,GAAgB,OAAA,CAAQ,8BAAR;;EAChB,OAAA,GAAgB,OAAA,CAAQ,8BAAR;;EAChB,MAGgB,OAAA,CAAQ,+BAAR,CAHhB,EACE,eAAA,QADF,EAEE,iBAAA;;EAEF,KAAA,GAAgB,OAAA,CAAQ,SAAR;;EAEV;;AAEJ;;;;;;;;;;;IASA,OAAO,CAAC,IAAR,GAAe,SAAC,QAAD,EACC,KADD,EAEC,OAFD;AAIb,UAAA;;QAJc,WAAW;;;QACX,QAAQ;;;QACR,UAAU;;MAExB,IAAkC,oBAAlC;QAAA,KAAK,CAAC,MAAN,GAAmB,IAAA,KAAA,CAAA,EAAnB;;MAEA,OAAA,GAAU,OAAA,CAAQ,QAAR;MAEV,IAAqC,UAAA,CAAW,OAAX,CAArC;QAAA,OAAA,GAAU,OAAA,CAAQ,KAAR,EAAe,OAAf,EAAV;;MACA,OAAO,CAAC,EAAE,CAAC,MAAX,GAAoB,KAAK,CAAC;aAC1B;IAVa;;;AAYf;;;;;;;;;;IASA,OAAO,CAAC,MAAR,GAAiB,SAAC,OAAD,EAAiB,KAAjB,EAA6B,OAA7B;;QAAC,UAAU;;;QAAM,QAAQ;;;QAAI,UAAU;;MACtD,IAAG,OAAA,KAAW,IAAX,IAAmB,QAAA,CAAS,OAAT,CAAtB;QACE,OAAA,GAAU,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,KAAtB,EAA6B,OAA7B,EADZ;;aAGA,OAAA,GAAc,IAAA,OAAA,CAAQ,OAAR;IAJC;;;AAMjB;;;;;;;;;;;;;;IAaA,OAAO,CAAC,cAAR,GAAyB,SAAC,MAAD,EACC,OADD,EAKC,MALD,EAMC,MAND;;QAAC,SAAS;;;QACT,UAAU;;;QAIV,SAAU;;;QACV,SAAU;;MAElC,IAAG,MAAA,KAAU,IAAV,IAAkB,QAAA,CAAS,MAAT,CAArB;QACE,MAAA,GAAS,OAAO,CAAC,YAAR,CAAqB,MAArB,EADX;;aAEA,aAAa,CAAC,cAAd,CAA6B,MAA7B,EAAqC,OAArC,EAA8C,MAA9C,EAAsD,MAAtD;IAVuB;;;AAYzB;;;;;;;;;;;IAUA,OAAO,CAAC,YAAR,GAAuB,SAAC,OAAD,EAAiB,GAAjB;;QAAC,UAAU;;;QAAM,MAAM;;MAC5C,IAAG,OAAA,KAAW,IAAX,IAAmB,QAAA,CAAS,OAAT,CAAtB;QACE,OAAA,GAAU,OAAO,CAAC,MAAR,CAAe,OAAf,EADZ;;aAEA,aAAa,CAAC,YAAd,CAA2B,OAA3B,EAAoC,GAApC;IAHqB;;;AAMvB;;;;;;;IAMa,iBAAC,QAAD;MAAC,IAAC,CAAA,UAAD;MACZ,yCAAM,IAAC,CAAA,OAAP;IADW;;;;KArFO;;EAwFtB,MAAM,CAAC,OAAP,GAAiB;AAhHjB","file":"Grammar.js","sourceRoot":"/source/","sourcesContent":["###\nÂ© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\nScriptGrammar = require 'goatee-script.js/lib/Grammar'\nNotator       = require 'goatee-script.js/lib/Notator'\n{\n  isString,\n  isFunction\n}             = require 'goatee-script.js/lib//Utility'\nScope         = require './Scope'\n\nclass Grammar extends ScriptGrammar\n\n  ###*\n  # -------------\n  # Loads the our **Grammar**\n  #\n  # @method loadGrammar\n  # @param  {String} [filename]\n  # @return {Parser}\n  # @static\n  ###\n  Grammar.load = (filename = './grammar/jison.coffee',\n                  scope = {},\n                  notator = Notator)->\n\n    scope.goatee = new Scope() unless scope.goatee?\n\n    grammar = require filename\n    # console.log 'load', grammar, 'from', filename\n    grammar = grammar(scope, notator) if isFunction grammar\n    grammar.yy.goatee = scope.goatee\n    grammar\n\n  ###*\n  # -------------\n  # Initializes our **Grammar**\n  #\n  # @method create\n  # @param  {String|Object} grammar filepath or object\n  # @return {Grammar}\n  # @static\n  ###\n  Grammar.create = (grammar = null, scope = {}, notator = Notator)->\n    if grammar is null or isString grammar\n      grammar = Grammar.load(grammar, scope, notator)\n    # console.log 'create', grammar\n    grammar = new Grammar grammar\n\n  ###*\n  # -------------\n  # Create and return the parsers source code wrapped into a closure, still\n  # keeping the value of `this`.\n  #\n  # @method generateParser\n  # @param  {Function} [generator]\n  # @param  {String} [comment]\n  # @param  {String} [prefix]\n  # @param  {String} [suffix]\n  # @return {String}\n  # @static\n  ###\n  Grammar.generateParser = (parser = null,\n                            comment = '''\n                                      /* Goatee Rules Parser */\n\n                                      ''',\n                            prefix  = null,\n                            suffix  = null) ->\n\n    if parser is null or isString parser\n      parser = Grammar.createParser parser\n    ScriptGrammar.generateParser parser, comment, prefix, suffix\n\n  ###*\n  # -------------\n  # Initializes the **Parser** with our **Grammar**\n  #\n  # @method createParser\n  # @param  {Grammar} [grammar]\n  # @param  {Function|Boolean} [log]\n  # @return {Parser}\n  # @static\n  ###\n  Grammar.createParser = (grammar = null, log = null) ->\n    if grammar is null or isString grammar\n      grammar = Grammar.create grammar\n    ScriptGrammar.createParser(grammar, log)\n\n\n  ###*\n  # -------------\n  # Use the default jison-lexer\n  #\n  # @constructor\n  ###\n  constructor: (@grammar) ->\n    super(@grammar)\n\nmodule.exports = Grammar\n"]}