{
  "startSymbol": "Rules",
  "bnf": {
    "Rules": [
      [
        "End",
        "return yy.goatee.create('scalar', [void 0]);"
      ],
      [
        "RuleMap End",
        "return $1;"
      ],
      [
        "Seperator RuleMap End",
        "return $2;"
      ]
    ],
    "RuleMap": [
      [
        "Map",
        "$$ = yy.goatee.create('rules', $1);",
        null
      ],
      [
        "RuleMap Seperator Map",
        "$$ = yy.goatee.addRule($1, $3);",
        null
      ]
    ],
    "Map": [
      [
        "KEY : Rule",
        "$$ = [$1].concat($3);",
        null
      ]
    ],
    "Rule": [
      [
        "List",
        "$$ = [$1, false];",
        null
      ],
      [
        "List NONIMPORTANT",
        "$$ = [$1, true];",
        null
      ]
    ],
    "End": [
      [
        "EOF",
        "return;"
      ],
      [
        "Seperator EOF",
        "return;"
      ]
    ],
    "Identifier": [
      [
        "THIS",
        "$$ = $1;",
        null
      ],
      [
        "REFERENCE",
        "$$ = $1;",
        null
      ]
    ],
    "Seperator": [
      [
        ";",
        "return;"
      ],
      [
        "Seperator ;",
        "return;"
      ]
    ],
    "Statement": [
      [
        "Conditional",
        "$$ = $1;",
        null
      ],
      [
        "Expression",
        "$$ = $1;",
        null
      ]
    ],
    "Parameters": [
      [
        "",
        "$$ = [];",
        null
      ],
      [
        "Expression",
        "$$ = [$1];",
        null
      ],
      [
        "Parameters , Expression",
        "$$ = $1.concat($3);",
        null
      ]
    ],
    "Key": [
      [
        "Scalar",
        "$$ = $1;",
        null
      ],
      [
        "Primitive",
        "$$ = $1;",
        null
      ],
      [
        "Property",
        "$$ = $1;",
        null
      ]
    ],
    "KeyValues": [
      [
        "Key : Expression",
        "$$ = [$1, $3];",
        null
      ],
      [
        "KeyValues , KeyValues",
        "$$ = $1.concat($3);",
        null
      ]
    ],
    "Object": [
      [
        "{ }",
        "$$ = yy.goatee.create('object', []);",
        null
      ],
      [
        "{ KeyValues }",
        "$$ = yy.goatee.create('object', $2);",
        null
      ]
    ],
    "Elements": [
      [
        "",
        "$$ = [];",
        null
      ],
      [
        "Expression",
        "$$ = [$1];",
        null
      ],
      [
        "Elements , Elements",
        "$$ = $1.concat($3.length === 0 ? [void 0] : $3);",
        null
      ]
    ],
    "Array": [
      [
        "[ Elements ]",
        "$$ = yy.goatee.create('array', $2);",
        null
      ]
    ],
    "Block": [
      [
        "{ Seperator }",
        "$$ = yy.goatee.create('scalar', [void 0]);",
        null
      ],
      [
        "{ Statements }",
        "$$ = $2;",
        null
      ],
      [
        "{ Statements Seperator }",
        "$$ = $2;",
        null
      ]
    ],
    "If": [
      [
        "IF Group Block",
        "$$ = yy.goatee.create('if', [$2, $3]);",
        null
      ],
      [
        "If ELSE IF Group Block",
        "$$ = yy.goatee.addElse($1, yy.goatee.create('if', [$4, $5]));",
        null
      ]
    ],
    "Conditional": [
      [
        "If",
        "$$ = $1;",
        null
      ],
      [
        "If ELSE Block",
        "$$ = yy.goatee.addElse($1, $3);",
        null
      ]
    ],
    "IncDec": [
      [
        "++",
        "$$ = $1;",
        null
      ],
      [
        "--",
        "$$ = $1;",
        null
      ]
    ],
    "Assignment": [
      [
        "IncDec Identifier",
        "$$ = yy.goatee.create($1, [$2, 0]);",
        null
      ],
      [
        "Identifier IncDec",
        "$$ = yy.goatee.create($2, [$1, 1]);",
        null
      ],
      [
        "REFERENCE -= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE += Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE *= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE /= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE %= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE ^= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE >>>= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE >>= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE <<= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE &= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE |= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "REFERENCE = Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ]
    ],
    "Scalar": [
      [
        "NUMBER",
        "$$ = Number($1);",
        null
      ],
      [
        "+ NUMBER",
        "$$ = +Number($2);",
        null
      ],
      [
        "- NUMBER",
        "$$ = -Number($2);",
        null
      ],
      [
        "STRING",
        "$$ = yy.goatee.escape($1);",
        null
      ]
    ],
    "Primitive": [
      [
        "NULL",
        "$$ = null;",
        null
      ],
      [
        "TRUE",
        "$$ = true;",
        null
      ],
      [
        "FALSE",
        "$$ = false;",
        null
      ]
    ],
    "Operation": [
      [
        "Expression * Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression / Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression % Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression + Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression - Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "NONIMPORTANT",
        "$$ = yy.goatee.create('!', [yy.goatee.create('reference', ['important'])]);",
        null
      ],
      [
        "! Expression",
        "$$ = yy.goatee.create('!', [$2]);",
        null
      ],
      [
        "Expression <= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression >= Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression < Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression > Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression === Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression !== Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression == Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression != Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression && Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression || Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "~ Expression",
        "$$ = yy.goatee.create('~', [$2]);",
        null
      ],
      [
        "Expression >>> Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression >> Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression << Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression & Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression | Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ],
      [
        "Expression ^ Expression",
        "$$ = yy.goatee.create($2, [$1, $3]);",
        null
      ]
    ],
    "Literal": [
      [
        "Object",
        "$$ = $1;",
        null
      ],
      [
        "Array",
        "$$ = $1;",
        null
      ],
      [
        "Primitive",
        "$$ = yy.goatee.create('scalar', [$1]);",
        null
      ],
      [
        "Scalar",
        "$$ = yy.goatee.create('scalar', [$1]);",
        null
      ]
    ],
    "Scope": [
      [
        "CONTEXT",
        "$$ = yy.goatee.create('context', [$1]);",
        null
      ],
      [
        "SELF",
        "$$ = yy.goatee.create('context', [$1]);",
        null
      ]
    ],
    "Reference": [
      [
        "Identifier",
        "$$ = yy.goatee.create('reference', [$1]);",
        null
      ],
      [
        "Scope Property",
        "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$2])]);",
        null
      ],
      [
        "Scope",
        "$$ = $1;",
        null
      ]
    ],
    "Property": [
      [
        "CONSTRUCTOR",
        "$$ = $1;",
        null
      ],
      [
        "PROTOTYPE",
        "$$ = $1;",
        null
      ],
      [
        "THIS",
        "$$ = $1;",
        null
      ],
      [
        "IF",
        "$$ = $1;",
        null
      ],
      [
        "THEN",
        "$$ = $1;",
        null
      ],
      [
        "ELSE",
        "$$ = $1;",
        null
      ],
      [
        "YIELD",
        "$$ = $1;",
        null
      ],
      [
        "INSTANCEOF",
        "$$ = $1;",
        null
      ],
      [
        "VOID",
        "$$ = $1;",
        null
      ],
      [
        "TYPEOF",
        "$$ = $1;",
        null
      ],
      [
        "NEW",
        "$$ = $1;",
        null
      ],
      [
        "RETURN",
        "$$ = $1;",
        null
      ],
      [
        "CONTEXT",
        "$$ = $1;",
        null
      ],
      [
        "REFERENCE",
        "$$ = $1;",
        null
      ],
      [
        "CONTEXT Property",
        "$$ = $1 + $2;",
        null
      ],
      [
        "CONTEXT Primitive",
        "$$ = $1 + $2;",
        null
      ]
    ],
    "Chain": [
      [
        "Expression . Primitive",
        "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$3])]);",
        null
      ],
      [
        "Expression . Property",
        "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$3])]);",
        null
      ]
    ],
    "List": [
      [
        "Statement",
        "$$ = $1;",
        null
      ],
      [
        "List , Statement",
        "$$ = (function () {\n          if ($1.operator.name === 'list') {\n            $1.parameters.push($3);\n            return $1;\n          } else {\n            return yy.goatee.create('list', [$1, $3]);\n          }\n        }.call(this));",
        null
      ]
    ],
    "Group": [
      [
        "( List )",
        "$$ = yy.goatee.create('group', [$2]);",
        null
      ]
    ],
    "Expression": [
      [
        "Expression ? Expression : Expression",
        "$$ = yy.goatee.create('?:', [$1, $3, $5]);",
        null
      ],
      [
        "Expression ( Parameters )",
        "$$ = yy.goatee.create('()', [$1].concat($3));",
        null
      ],
      [
        "Expression [ Expression ]",
        "$$ = yy.goatee.create('[]', [$1, $3]);",
        null
      ],
      [
        "Assignment",
        "$$ = $1;",
        null
      ],
      [
        "Reference",
        "$$ = $1;",
        null
      ],
      [
        "Literal",
        "$$ = $1;",
        null
      ],
      [
        "Operation",
        "$$ = $1;",
        null
      ],
      [
        "Chain",
        "$$ = $1;",
        null
      ],
      [
        "Group",
        "$$ = $1;",
        null
      ]
    ]
  },
  "lex": {
    "startConditions": {
      "rule": 1
    },
    "rules": [
      [
        "([_a-zA-Z]|[-_][_a-zA-Z])(-?\\w)*",
        "return 'KEY';"
      ],
      [
        [
          "rule"
        ],
        "\\s\\!important\\b",
        "return 'NONIMPORTANT';"
      ],
      [
        ":",
        "return (function () {\n          this.begin('rule');\n          return ':';\n        }.call(this));"
      ],
      [
        [
          "*"
        ],
        "\\s+",
        "return;"
      ],
      [
        [
          "rule"
        ],
        "0x[a-fA-F0-9]+\\b",
        "return 'NUMBER';"
      ],
      [
        [
          "rule"
        ],
        "([1-9][0-9]+|[0-9])(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b",
        "return 'NUMBER';"
      ],
      [
        [
          "rule"
        ],
        "null\\b",
        "return 'NULL';"
      ],
      [
        [
          "rule"
        ],
        "true\\b",
        "return 'TRUE';"
      ],
      [
        [
          "rule"
        ],
        "false\\b",
        "return 'FALSE';"
      ],
      [
        [
          "rule"
        ],
        "if\\b",
        "return 'IF';"
      ],
      [
        [
          "rule"
        ],
        "then\\b",
        "return 'THEN';"
      ],
      [
        [
          "rule"
        ],
        "else\\b",
        "return 'ELSE';"
      ],
      [
        [
          "rule"
        ],
        "return\\b",
        "return 'RETURN';"
      ],
      [
        [
          "rule"
        ],
        "new\\b",
        "return 'NEW';"
      ],
      [
        [
          "rule"
        ],
        "typeof\\b",
        "return 'TYPEOF';"
      ],
      [
        [
          "rule"
        ],
        "void\\b",
        "return 'VOID';"
      ],
      [
        [
          "rule"
        ],
        "instanceof\\b",
        "return 'INSTANCEOF';"
      ],
      [
        [
          "rule"
        ],
        "yield\\b",
        "return 'YIELD';"
      ],
      [
        [
          "rule"
        ],
        "constructor\\b",
        "return 'CONSTRUCTOR';"
      ],
      [
        [
          "rule"
        ],
        "(__proto__|prototype)\\b",
        "return 'PROTOTYPE';"
      ],
      [
        [
          "rule"
        ],
        "this\\b",
        "return 'THIS';"
      ],
      [
        [
          "rule"
        ],
        "[@]",
        "return 'SELF';"
      ],
      [
        [
          "rule"
        ],
        "[$_][$_0-9]",
        "return 'CONTEXT';"
      ],
      [
        [
          "rule"
        ],
        "[$_a-zA-Z]\\w*",
        "return 'REFERENCE';"
      ],
      [
        [
          "rule"
        ],
        "\"(\\\\x[a-fA-F0-9]{2}|\\\\u[a-fA-F0-9]{4}|\\\\[^xu]|[^\\\\\"])*\"",
        "return 'STRING';"
      ],
      [
        [
          "rule"
        ],
        "'(\\\\[\\/'\\\\bfnrt]|\\\\u[a-fA-F0-9]{4}|[^\\\\'])*'",
        "return 'STRING';"
      ],
      [
        [
          "*"
        ],
        "\\/\\*(?:.|[\\r\\n])*?\\*\\/",
        "return;"
      ],
      [
        [
          "rule"
        ],
        "\\.",
        "return '.';"
      ],
      [
        [
          "rule"
        ],
        "\\[",
        "return '[';"
      ],
      [
        [
          "rule"
        ],
        "\\]",
        "return ']';"
      ],
      [
        [
          "rule"
        ],
        "\\(",
        "return '(';"
      ],
      [
        [
          "rule"
        ],
        "\\)",
        "return ')';"
      ],
      [
        [
          "rule"
        ],
        "\\?",
        "return '?';"
      ],
      [
        [
          "rule"
        ],
        ":",
        "return ':';"
      ],
      [
        [
          "*"
        ],
        ";",
        "this.popState();return ';';"
      ],
      [
        [
          "rule"
        ],
        ",",
        "return ',';"
      ],
      [
        [
          "rule"
        ],
        "{",
        "return '{';"
      ],
      [
        [
          "rule"
        ],
        "}",
        "return '}';"
      ],
      [
        [
          "rule"
        ],
        "-=",
        "return '-=';"
      ],
      [
        [
          "rule"
        ],
        "\\+=",
        "return '+=';"
      ],
      [
        [
          "rule"
        ],
        "\\*=",
        "return '*=';"
      ],
      [
        [
          "rule"
        ],
        "\\/=",
        "return '/=';"
      ],
      [
        [
          "rule"
        ],
        "%=",
        "return '%=';"
      ],
      [
        [
          "rule"
        ],
        "--",
        "return '--';"
      ],
      [
        [
          "rule"
        ],
        "\\+\\+",
        "return '++';"
      ],
      [
        [
          "rule"
        ],
        ">>>=",
        "return '>>>=';"
      ],
      [
        [
          "rule"
        ],
        ">>=",
        "return '>>=';"
      ],
      [
        [
          "rule"
        ],
        "<<=",
        "return '<<=';"
      ],
      [
        [
          "rule"
        ],
        "\\&=",
        "return '&=';"
      ],
      [
        [
          "rule"
        ],
        "\\|=",
        "return '|=';"
      ],
      [
        [
          "rule"
        ],
        "\\^=",
        "return '^=';"
      ],
      [
        [
          "rule"
        ],
        "===",
        "return '===';"
      ],
      [
        [
          "rule"
        ],
        "!==",
        "return '!==';"
      ],
      [
        [
          "rule"
        ],
        "==",
        "return '==';"
      ],
      [
        [
          "rule"
        ],
        "!=",
        "return '!=';"
      ],
      [
        [
          "rule"
        ],
        "<=",
        "return '<=';"
      ],
      [
        [
          "rule"
        ],
        ">=",
        "return '>=';"
      ],
      [
        [
          "rule"
        ],
        "<",
        "return '<';"
      ],
      [
        [
          "rule"
        ],
        ">",
        "return '>';"
      ],
      [
        [
          "rule"
        ],
        "\\&\\&",
        "return '&&';"
      ],
      [
        [
          "rule"
        ],
        "\\|\\|",
        "return '||';"
      ],
      [
        [
          "rule"
        ],
        "!",
        "return '!';"
      ],
      [
        [
          "rule"
        ],
        "-",
        "return '-';"
      ],
      [
        [
          "rule"
        ],
        "\\+",
        "return '+';"
      ],
      [
        [
          "rule"
        ],
        "\\*",
        "return '*';"
      ],
      [
        [
          "rule"
        ],
        "\\/",
        "return '/';"
      ],
      [
        [
          "rule"
        ],
        "\\^",
        "return '^';"
      ],
      [
        [
          "rule"
        ],
        "%",
        "return '%';"
      ],
      [
        [
          "rule"
        ],
        ">>>",
        "return '>>>';"
      ],
      [
        [
          "rule"
        ],
        ">>",
        "return '>>';"
      ],
      [
        [
          "rule"
        ],
        "<<",
        "return '<<';"
      ],
      [
        [
          "rule"
        ],
        "\\&",
        "return '&';"
      ],
      [
        [
          "rule"
        ],
        "\\|",
        "return '|';"
      ],
      [
        [
          "rule"
        ],
        "~",
        "return '~';"
      ],
      [
        [
          "rule"
        ],
        "=",
        "return '=';"
      ],
      [
        [
          "*"
        ],
        "$",
        "this.popState();return 'EOF';"
      ]
    ]
  },
  "operators": [
    [
      "left",
      ","
    ],
    [
      "right",
      "=",
      "+=",
      "-=",
      "*=",
      "/=",
      "%=",
      "<<=",
      ">>=",
      ">>>=",
      "&=",
      "^=",
      "|="
    ],
    [
      "right",
      "YIELD"
    ],
    [
      "right",
      "?",
      ":"
    ],
    [
      "left",
      "||"
    ],
    [
      "left",
      "&&"
    ],
    [
      "left",
      "|"
    ],
    [
      "left",
      "&"
    ],
    [
      "left",
      "^"
    ],
    [
      "left",
      "===",
      "!==",
      "==",
      "!="
    ],
    [
      "left",
      "IN",
      "INSTANCEOF"
    ],
    [
      "left",
      "<=",
      ">=",
      "<",
      ">"
    ],
    [
      "left",
      ">>>",
      ">>",
      "<<"
    ],
    [
      "left",
      "+",
      "-"
    ],
    [
      "left",
      "*",
      "/",
      "%"
    ],
    [
      "right",
      "!",
      "~",
      "TYPEOF",
      "VOID",
      "DELETE"
    ],
    [
      "nonassoc",
      "++",
      "--"
    ],
    [
      "left",
      "(",
      ")"
    ],
    [
      "right",
      "NEW"
    ],
    [
      "left",
      ".",
      "[",
      "]"
    ]
  ],
  "tokens": "KEY : NONIMPORTANT EOF THIS REFERENCE ;  , { } [ ] Statements IF ELSE ++ -- -= += *= /= %= ^= >>>= >>= <<= &= |= = NUMBER + - STRING NULL TRUE FALSE * / % ! <= >= < > === !== == != && || ~ >>> >> << & | ^ CONTEXT SELF CONSTRUCTOR PROTOTYPE THEN YIELD INSTANCEOF VOID TYPEOF NEW RETURN . ( ) ?",
  "yy": {}
}