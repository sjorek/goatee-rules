// Generated by CoffeeScript 1.6.3
/*
Â© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var Grammar, ScriptGrammar, exports, lib, yy, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  lib = require('./Utility').Utility.lib;

  yy = require(lib + 'Scope').Scope;

  ScriptGrammar = require(lib + 'Grammar').Grammar;

  exports = (_ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref : this;

  exports.Grammar = Grammar = (function(_super) {
    var $1, $2, $3, $4, $5, $6, $7, $8, c, o, r;

    __extends(Grammar, _super);

    function Grammar() {
      _ref1 = Grammar.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    $1 = $2 = $3 = $4 = $5 = $6 = $7 = $8 = null;

    r = ScriptGrammar.r, o = ScriptGrammar.o;

    Grammar.c = c = function(conditional, patternString, action) {
      return [conditional].concat(r(patternString, action));
    };

    Grammar.prototype.create = function() {
      return "/* Goatee Rules Parser */\n(function() {\n\n" + (Grammar.createParser(this).generate()) + "\n\nparser.yy = require(require('./Utility').Utility.lib + 'Scope').Scope;\n\n}).call(this);";
    };

    Grammar.prototype.lex = (function() {
      var rules;
      rules = [
        r(/([_a-zA-Z]|[-_][_a-zA-Z])(-?\w)*/, function() {
          return 'KEY';
        }), c(['rule'], /\!important\b/, function() {
          return 'NONIMPORTANT';
        }), r(':', function() {
          this.begin('rule');
          return ':';
        })
      ].concat(ScriptGrammar.prototype.lex.rules.map(function(v, k) {
        switch (v[1]) {
          case 'return;':
            return [['*']].concat(v);
          case 'return \';\';':
          case 'return \'EOF\';':
            v[1] = 'this.popState();' + v[1];
            return [['*']].concat(v);
          default:
            return [['rule']].concat(v);
        }
      }));
      return {
        startConditions: {
          rule: 1
        },
        rules: rules
      };
    })();

    Grammar.prototype.startSymbol = 'Rules';

    Grammar.prototype.bnf = (function() {
      var grammar, k, ops, rule, v, _i, _len, _ref2;
      grammar = {
        Rules: [
          r('End', function() {
            return new yy.Expression('scalar', [void 0]);
          }), r('RuleMap End', function() {
            return $1;
          }), r('Seperator RuleMap End', function() {
            return $2;
          })
        ],
        RuleMap: [
          o('Map'), o('RuleMap Seperator Map', function() {
            if ($1.operator.name === 'block') {
              $1.parameters.push($3);
              return $1;
            } else {
              return new yy.Expression('block', [$1, $3]);
            }
          })
        ],
        Map: [
          o('KEY : Rule', function() {
            return new yy.Expression('=', [$1, $3[0].operator.name === 'list' ? new yy.Expression('group', [$3[0]]) : $3[0]]);
          })
        ],
        Rule: [
          o('List', function() {
            return [$1, false];
          }), o('List NONIMPORTANT', function() {
            return [$1, true];
          })
        ]
      };
      _ref2 = ScriptGrammar.prototype.bnf;
      for (k in _ref2) {
        if (!__hasProp.call(_ref2, k)) continue;
        v = _ref2[k];
        if (!(k !== 'Script' && k !== 'Statements')) {
          continue;
        }
        if (k !== 'Operation') {
          grammar[k] = v;
          continue;
        }
        ops = [];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          rule = v[_i];
          if (rule[0] === '! Expression') {
            ops.push(o('NONIMPORTANT', function() {
              return new yy.Expression('!', [new yy.Expression('reference', ['important'])]);
            }));
          }
          ops.push(rule);
        }
        grammar[k] = ops;
      }
      return grammar;
    })();

    return Grammar;

  })(ScriptGrammar);

  Grammar.createParser = function(grammar, scope) {
    if (grammar == null) {
      grammar = new Grammar;
    }
    if (scope == null) {
      scope = yy;
    }
    return ScriptGrammar.createParser(grammar, scope);
  };

}).call(this);

/*
//@ sourceMappingURL=Grammar.map
*/
