{"version":3,"sources":["Rules.coffee"],"names":[],"mappings":"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","file":"Rules.js","sourcesContent":["### ^\nBSD 3-Clause License\n\nCopyright (c) 2017, Stephan Jorek\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n###\n###\n# # Rules …\n# -------------\n# … provide a lightweight version of CSSOM.CSSStyleRule.\n#\n####\n\n###*\n#  -------------\n# @class Rules\n# @namespace GoateeRules\n###\nclass Rules\n\n  ###*\n  #  -------------\n  # NON-STANDARD\n  # lightweight version of CSSOM.CSSStyleRule.parse\n  # @see implementation below\n  ###\n  Rules.parse             = do ->\n\n    ##\n    # Un-inlined literals, to avoid object creation.\n    _CHAR_space           = ' '\n    _CHAR_tab             = '\\t' # tabulator\n    _CHAR_vtab            = '\\v' # vertical tabulator\n    _CHAR_cr              = '\\r' # carriage return\n    _CHAR_lf              = '\\n' # line feed\n    _CHAR_ff              = '\\f' # form feed\n    _CHAR_doublequote     = '\"'\n    _CHAR_singlequote     = \"'\"\n    _CHAR_slash           = '/'\n    _CHAR_backslash       = '\\\\'\n    _CHAR_colon           = ':'\n    _CHAR_semicolon       = ';'\n    _CHAR_exclamation     = '!'\n    _CHAR_asterisk        = '*'\n\n    _STRING_empty         = ''\n    _STRING_opencomment   = '/*'\n    _STRING_closecomment  = '*/'\n    _STRING_nonimportant  = '!important'\n\n    _REGEXP_isEscaped     = /[^\\\\](\\\\\\\\)*$/\n\n    ###*\n    #  -------------\n    # Internal list of error messages, used by Expressions.parse\n    # @type {Array}\n    ###\n    _errors               = [\n      'Unexpected content after important declaration'\n      'Missing closing string'\n      'Missing closing comment'\n      'Unexpected string opener'\n      'Missing identifier key'\n      'Important already declared'\n    ]\n\n    ###*\n    #  -------------\n    # Internal error message function\n    # @function _error\n    # @param  {Number} num\n    # @param  {String} rules\n    # @param  {Number} i\n    # @return {String}\n    # @private\n    ###\n    _error                = (num, rules, i) ->\n      \"\"\"\n      #{_errors[num - 1]}:\n      “#{rules.slice(0, i)}»»»#{rules.charAt(i)}«««#{rules.slice(i + 1)}”\n      \"\"\"\n\n    ###*\n    #  -------------\n    # NON-STANDARD\n    # lightweight version of CSSOM.CSSStyleRule.parse\n    #\n    # @method parse\n    # @param  {String} rules\n    # @param  {AttributeMap|PropertyMap|RuleMap} [_map] Optional instance to\n    #                                                   merge rules into.\n    # @return {AttributeMap|PropertyMap|RuleMap}        The filled **_map**\n    # @static\n    ###\n    (rules, _map)       ->\n\n      _map      ?= new (require('./Unordered/RuleMap'))\n      i          = 0\n      j          = i\n      stateKey   = 'key'\n      stateValue = 'value'\n      state      = stateKey\n      buffer     = ''\n      char       = ''\n      key        = ''\n      value      = ''\n      important  = false\n\n      `for (char = ''; (char = rules.charAt(i)) !== ''; i++) {`\n\n      # console.log 'Processing', i, '=', char\n\n      switch char\n\n        # ' ', '\\t', '\\v', '\\r', '\\n', '\\f'\n        when _CHAR_space, _CHAR_tab, _CHAR_vtab, _CHAR_cr, _CHAR_lf, _CHAR_ff\n\n          # SIGNIFICANT_WHITESPACE\n          buffer += char if state is stateValue and not important\n          continue\n          break\n\n        # String\n        # \"'\", '\"'\n        when _CHAR_singlequote, _CHAR_doublequote\n          if important\n            throw (_error 1, rules, i)\n          else if state is stateValue\n            j = i + 1\n            while index = rules.indexOf(char, j) + 1\n              if rules.charAt(index - 2) isnt _CHAR_backslash or \\\n                 _REGEXP_isEscaped.test rules.slice(i, index - 1)\n                break\n              j = index\n\n            throw (_error 2, rules, i) if index is 0\n            buffer += rules.slice(i, index)\n            i = index - 1\n            continue\n          else\n            throw (_error 4, rules, i)\n          break\n\n        # Comment\n        # '/'\n        when _CHAR_slash\n          if rules.charAt(i + 1) is _CHAR_asterisk # '*'\n            i += 2\n            index = rules.indexOf _STRING_closecomment, i # '*/', i\n            throw (_error 3, rules, i) if index is -1\n            i = index + 1\n            continue\n          else if important\n            throw (_error 1, rules, i)\n          else\n            buffer += char\n            continue\n          break\n\n        # ':'\n        when _CHAR_colon\n          if state is stateKey\n            key   += buffer\n            throw (_error 5, rules, i) if key is _STRING_empty\n            buffer = ''\n            state  = stateValue\n            continue\n          else if important\n            throw (_error 1, rules, i)\n          else\n            buffer += char\n            continue\n          break\n\n        # '!'\n        when _CHAR_exclamation\n          if state is stateValue and rules.indexOf(_STRING_nonimportant, i) is i\n            throw (_error 6, rules, i) if important\n            important = true\n            i += 9 # = 'important'.length\n            continue\n          else if important\n            throw (_error 1, rules, i)\n          else\n            buffer += char\n            continue\n          break\n\n        # ';'\n        when _CHAR_semicolon\n          if state is stateKey\n            continue\n          if state is stateValue\n            value    += buffer\n\n            _map.add(key, value, important)\n\n            important = false\n            key       = ''\n            value     = ''\n            buffer    = ''\n            state     = stateKey\n            continue\n          else if important\n            throw (_error 1, rules, i)\n          else\n            buffer += char\n            continue\n          break\n\n        else\n          throw (_error 1, rules, i) if important\n          buffer += char\n          continue\n          break\n\n      `}`\n\n      _map.add(key, value + buffer, important) if state is stateValue\n\n      return _map\n\nmodule.exports = Rules\n"]}