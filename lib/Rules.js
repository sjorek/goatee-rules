// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>  

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

<http://www.apache.org/licenses/LICENSE-2.0>

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var Rules, exports, _ref;

  exports = (_ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref : this;

  exports.Rules = Rules = (function() {
    function Rules() {}

    Rules.parse = (function() {
      var _CHAR_asterisk, _CHAR_backslash, _CHAR_colon, _CHAR_cr, _CHAR_doublequote, _CHAR_exclamation, _CHAR_ff, _CHAR_lf, _CHAR_semicolon, _CHAR_singlequote, _CHAR_slash, _CHAR_space, _CHAR_tab, _CHAR_vtab, _REGEXP_isEscaped, _STRING_closecomment, _STRING_empty, _STRING_nonimportant, _STRING_opencomment, _error, _errors;
      _CHAR_space = " ";
      _CHAR_tab = "\t";
      _CHAR_vtab = "\v";
      _CHAR_cr = "\r";
      _CHAR_lf = "\n";
      _CHAR_ff = "\f";
      _CHAR_doublequote = '"';
      _CHAR_singlequote = "'";
      _CHAR_slash = '/';
      _CHAR_backslash = '\\';
      _CHAR_colon = ':';
      _CHAR_semicolon = ';';
      _CHAR_exclamation = '!';
      _CHAR_asterisk = '*';
      _STRING_empty = '';
      _STRING_opencomment = '/*';
      _STRING_closecomment = '*/';
      _STRING_nonimportant = '!important';
      _REGEXP_isEscaped = /[^\\](\\\\)*$/;
      _errors = ["Unexpected content after important declaration", "Missing closing string", "Missing closing comment", "Unexpected string opener", "Missing identifier key", "Important already declared"];
      _error = function(num, rules, i) {
        return "" + _errors[num - 1] + ":\n“" + (rules.slice(0, i)) + "»»»" + (rules.charAt(i)) + "«««" + (rules.slice(i + 1)) + "”";
      };
      return function(rules, _map) {
        var buffer, char, i, important, index, j, key, state, stateKey, stateValue, value;
        if (_map == null) {
          _map = new (require('./Unordered/RuleMap').RuleMap);
        }
        i = 0;
        j = i;
        stateKey = "key";
        stateValue = "value";
        state = stateKey;
        buffer = "";
        char = "";
        key = "";
        value = "";
        important = false;
        for (char = ""; (char = rules.charAt(i)) !== ""; i++) {;
        switch (char) {
          case _CHAR_space:
          case _CHAR_tab:
          case _CHAR_vtab:
          case _CHAR_cr:
          case _CHAR_lf:
          case _CHAR_ff:
            if (state === stateValue && !important) {
              buffer += char;
            }
            continue;
            break;
          case _CHAR_singlequote:
          case _CHAR_doublequote:
            if (important) {
              throw _error(1, rules, i);
            } else if (state === stateValue) {
              j = i + 1;
              while (index = rules.indexOf(char, j) + 1) {
                if (rules.charAt(index - 2) !== _CHAR_backslash || _REGEXP_isEscaped.test(rules.slice(i, index - 1))) {
                  break;
                }
                j = index;
              }
              if (index === 0) {
                throw _error(2, rules, i);
              }
              buffer += rules.slice(i, index);
              i = index - 1;
              continue;
            } else {
              throw _error(4, rules, i);
            }
            break;
          case _CHAR_slash:
            if (rules.charAt(i + 1) === _CHAR_asterisk) {
              i += 2;
              index = rules.indexOf(_STRING_closecomment, i);
              if (index === -1) {
                throw _error(3, rules, i);
              }
              i = index + 1;
              continue;
            } else if (important) {
              throw _error(1, rules, i);
            } else {
              buffer += char;
              continue;
            }
            break;
          case _CHAR_colon:
            if (state === stateKey) {
              key += buffer;
              if (key === _STRING_empty) {
                throw _error(5, rules, i);
              }
              buffer = "";
              state = stateValue;
              continue;
            } else if (important) {
              throw _error(1, rules, i);
            } else {
              buffer += char;
              continue;
            }
            break;
          case _CHAR_exclamation:
            if (state === stateValue && rules.indexOf(_STRING_nonimportant, i) === i) {
              if (important) {
                throw _error(6, rules, i);
              }
              important = true;
              i += 9;
              continue;
            } else if (important) {
              throw _error(1, rules, i);
            } else {
              buffer += char;
              continue;
            }
            break;
          case _CHAR_semicolon:
            if (state === stateKey) {
              continue;
            }
            if (state === stateValue) {
              value += buffer;
              _map.add(key, value, important);
              important = false;
              key = "";
              value = "";
              buffer = "";
              state = stateKey;
              continue;
            } else if (important) {
              throw _error(1, rules, i);
            } else {
              buffer += char;
              continue;
            }
            break;
          default:
            if (important) {
              throw _error(1, rules, i);
            }
            buffer += char;
            continue;
            break;
        }
        };
        if (state === stateValue) {
          _map.add(key, value + buffer, important);
        }
        return _map;
      };
    })();

    return Rules;

  })();

}).call(this);

/*
//@ sourceMappingURL=Rules.map
*/
