{"version":3,"sources":["Scope.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;AAAA;AAAA,MAAA,+BAAA;IAAA;;;EAgBA,WAAA,GAAc,OAAA,CAAQ,4BAAR;;EAEd,WAAA,GAAc,OAAA,CAAQ,eAAR;;;AAEd;;;;;;;AAMA;;;;;;EAKM;;;;;;;;AAEJ;;;;;;;;;;oBASA,MAAA,GAAU,SAAC,QAAD,EAAW,UAAX;MACR,IAA+C,QAAA,KAAY,OAA3D;AAAA,eAAO,IAAC,CAAA,OAAD,CAAS,IAAI,WAAb,EAA0B,UAA1B,EAAP;;aACA,kCAAM,QAAN,EAAgB,UAAhB;IAFQ;;;AAIV;;;;;;;;;oBAQA,OAAA,GAAS,SAAC,IAAD,EAAO,UAAP;AACP,UAAA;MAAC,mBAAD,EAAK,0BAAL,EAAgB;MAChB,IAAG,UAAU,CAAC,QAAQ,CAAC,IAApB,KAA4B,MAA/B;QACE,UAAA,GAAa,IAAC,CAAA,MAAD,CAAQ,OAAR,EAAiB,CAAC,UAAD,CAAjB,EADf;;aAEA,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,UAAd,EAA0B,SAA1B;IAJO;;;;KAvBS;;EA6BpB,MAAM,CAAC,OAAP,GAAiB;AA5DjB","file":"Scope.js","sourcesContent":["###\nÂ© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\nScriptScope = require 'goatee-script.js/lib/Scope'\n\nExpressions = require './Expressions'\n\n###\n# # Scope\n# -------\n#\n###\n\n###*\n#  -------------\n# @class Scope\n# @namespace GoateeRules\n###\nclass Scope extends ScriptScope\n\n  ###*\n  # -------------\n  # Create a new **Expression** or **Expressions** instance\n  #\n  # @method create\n  # @param  {String}      operator\n  # @param  {Array}       parameters\n  # @return {Expressions|Expression}\n  ###\n  create  : (operator, parameters) ->\n    return @addRule new Expressions, parameters if operator is 'rules'\n    super(operator, parameters)\n\n  ###*\n  #  -------------\n  # Add a Expression to the given ExpressionMap **rule**\n  #\n  # @method addRule\n  # @param {ExpressionMap} rule\n  # @param {Array}         parameters\n  ###\n  addRule: (rule, parameters) ->\n    [key,expression,important] = parameters\n    if expression.operator.name is 'list'\n      expression = @create 'group', [expression]\n    rule.add key, expression, important\n\nmodule.exports = Scope\n"]}