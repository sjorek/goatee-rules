{"version":3,"sources":["Utility.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;AAMA;;;;;;AArCA;AAAA,MAAA;;EA0CM;;AAEJ;;;;;;;;;IAOA,OAAO,CAAC,SAAR,GAAoB,SAAC,GAAD;aAClB,aAAA,IAAS,mBAAT,IAAwB;IADN;;;AAGpB;;;;;;;;;IAQA,OAAO,CAAC,KAAR,GACA,OAAO,CAAC,WAAR,GAAyB,CAAA,SAAA;AACvB,UAAA;MAAA,MAAA,GAAS;MACT,KAAA,GAAS;aACT,SAAC,IAAD;AACE,YAAA;QAAA,IAAsB,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAtB;AAAA,iBAAO,KAAM,CAAA,IAAA,EAAb;;;UACA,SAAU,OAAA,CAAQ,UAAR;;QACV,UAAA,GAAa,MAAM,CAAC,KAAP,CAAa,IAAb;eACb,KAAM,CAAA,IAAA,CAAN,GAAc,KAAM,CAAA,EAAA,GAAK,UAAL,CAAN,GAAyB;MAJzC;IAHuB,CAAA,CAAH,CAAA;;;AAStB;;;;;;;;;;;IAUA,OAAO,CAAC,UAAR,GAA2B,CAAA,SAAA;AACzB,UAAA;MAAA,MAAA,GAAS;MACT,KAAA,GAAS;aACT,SAAC,IAAD;AACE,YAAA;QAAA,IAAsB,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAtB;AAAA,iBAAO,KAAM,CAAA,IAAA,EAAb;;;UACA,SAAU,OAAA,CAAQ,SAAR;;QACV,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAa,IAAb;eACR,KAAM,CAAA,IAAA,CAAN,GAAc,KAAM,CAAA,EAAA,GAAK,KAAL,CAAN,GAAoB;MAJpC;IAHyB,CAAA,CAAH,CAAA;;;AASxB;;;;;;;;;IAQA,OAAO,CAAC,IAAR,GACK,6BAAH,GACE,SAAC,MAAD;aAAY,MAAM,CAAC,IAAP,CAAA;IAAZ,CADF,GAEQ,CAAA,SAAA;AAEN,UAAA;MAAA,YAAA,GAAe;aACf,SAAC,MAAD;eAAe,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,EAA7B;MAAf;IAHM,CAAA,CAAH,CAAA;;;AAKP;;;;;;;;;;IASA,OAAO,CAAC,QAAR,GAA2B,CAAA,SAAA;AACzB,UAAA;MAAA,gBAAA,GAAsB;MACtB,SAAA,GAAuB,SAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,GAArB;eAA6B,IAAI,CAAC,WAAL,CAAA;MAA7B;aACvB,SAAC,MAAD;eAAuB,MAAM,CAAC,OAAP,CAAe,gBAAf,EAAiC,SAAjC;MAAvB;IAHyB,CAAA,CAAH,CAAA;;;AAKxB;;;;;;;;;;IASA,OAAO,CAAC,OAAR,GAA2B,CAAA,SAAA;AACzB,UAAA;MAAA,UAAA,GAAsB;MACtB,eAAA,GAAsB;MACtB,QAAA,GAAsB,SAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,KAArB,EAA4B,GAA5B;eACpB,IAAI,CAAC,WAAL,CAAA,CAAA,GAAqB,UAArB,GAAkC,KAAK,CAAC,WAAN,CAAA;MADd;aAEtB,SAAC,MAAD;eAAuB,MAAM,CAAC,OAAP,CAAe,eAAf,EAAgC,QAAhC;MAAvB;IALyB,CAAA,CAAH,CAAA;;;;;;EAO1B,MAAM,CAAC,OAAP,GAAiB;AAzIjB","file":"Utility.js","sourcesContent":["### ^\nBSD 3-Clause License\n\nCopyright (c) 2017, Stephan Jorek\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n###\n###\n# # Utilities\n# -------------\n#\n###\n\n###*\n# -------------\n# @class Utility\n# @namespace GoateeRules\n###\nclass Utility\n\n  ###*\n  # -------------\n  # @method isRuleMap\n  # @param {mixed} obj\n  # @return {Boolean}\n  # @static\n  ###\n  Utility.isRuleMap = (obj) ->\n    obj? and obj.rules? and obj.priority?\n\n  ###*\n  # -------------\n  # @method parseScript\n  # @alias  parse\n  # @param  {String}     code\n  # @return {Expression}\n  # @static\n  ###\n  Utility.parse = \\\n  Utility.parseScript = do ->\n    parser = null\n    cache  = {}\n    (code) ->\n      return cache[code] if cache.hasOwnProperty(code)\n      parser ?= require './Parser'\n      expression = parser.parse code\n      cache[code] = cache['' + expression] = expression\n\n  ###*\n  # -------------\n  # NON-STANDARD\n  # caching lightweight version of CSSOM.CSSStyleRule.parse\n  #\n  # @method parseRules\n  # @param  {String}       code\n  # @return {Expressions}\n  # @static\n  ###\n  Utility.parseRules    = do ->\n    parser = null\n    cache  = {}\n    (code) ->\n      return cache[code] if cache.hasOwnProperty(code)\n      parser ?= require './Rules'\n      rules = parser.parse code\n      cache[code] = cache['' + rules] = rules\n\n  ###*\n  # -------------\n  # Trim whitespace from begin and end of string.\n  # @method trim\n  # @param  {String}  string  Input string.\n  # @return {String}  Trimmed string.\n  # @static\n  ###\n  Utility.trim          =\n    if String::trim?\n      (string) -> string.trim()\n    else do ->\n      # Un-inlined literal, to avoid object creation.\n      _REGEXP_trim = /^\\s+|\\s+$/g\n      (string)    -> string.replace _REGEXP_trim, ''\n\n  ###*\n  # -------------\n  # Converts “a-property-name” to “aPropertyName”\n  #\n  # @method camelize\n  # @param  {String}  string  Input string.\n  # @return {String}  a camelized string.\n  # @static\n  ###\n  Utility.camelize      = do ->\n    _REGEXP_camelize    = /-([a-z0-9])/gi\n    _camelize           =  (match, char, index, str) -> char.toUpperCase()\n    (string)            -> string.replace _REGEXP_camelize, _camelize\n\n  ###*\n  # -------------\n  # Converts “aPropertyName” to “a-property-name”\n  #\n  # @method dashify\n  # @param  {String}  string  Input string.\n  # @return {String}  Dashed string.\n  # @static\n  ###\n  Utility.dashify       = do ->\n    _CHAR_dash          = '-'\n    _REGEXP_dashify     = /(^|[a-z0-9])([A-Z])/g\n    _dashify            = (match, char, camel, index, str) ->\n      char.toLowerCase() + _CHAR_dash + camel.toLowerCase()\n    (string)            -> string.replace _REGEXP_dashify, _dashify\n\nmodule.exports = Utility\n"]}