{"version":3,"sources":["Ordered/RuleMap.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;AAAA;AAAA,MAAA,yBAAA;IAAA;;;EAiBA,gBAAA,GAAmB,OAAA,CAAQ,sBAAR;;;AAEnB;;;;;;;;;;AASA;;;;;;EAKM;;;;AAEJ;;;;;;;;IAOa,iBAAC,QAAD,EAAiB,KAAjB,EAAyB,QAAzB;MAAC,IAAC,CAAA,8BAAD,WAAY;MAAI,IAAC,CAAA,QAAD;MAAQ,IAAC,CAAA,WAAD;MACpC,yCAAM,IAAC,CAAA,KAAP,EAAc,IAAC,CAAA,QAAf;IADW;;;AAGb;;;;;;;;;;;sBAUA,GAAA,GAAK,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;AAEH,UAAA;MAAA,EAAA,GAAS,IAAC,CAAA,YAAD,CAAc,GAAd;MACT,MAAA,GAAS,IAAC,CAAA,KAAK,CAAC,cAAP,CAAsB,EAAtB;MAET,IAAA,CAAA,CAAmB,SAAA,KAAa,IAAb,IACA,MAAA,KAAU,KADV,IAEA,IAAC,CAAA,QAAQ,CAAC,cAAV,CAAyB,EAAzB,CAAA,KAAgC,KAFnD,CAAA;AAAA,eAAO,KAAP;;MAIA,IAAC,CAAA,KAAM,CAAA,EAAA,CAAP,GAAgB,IAAC,CAAA,cAAD,CAAgB,KAAhB;MAChB,IAAwB,SAAA,KAAa,IAArC;QAAA,IAAC,CAAA,QAAS,CAAA,EAAA,CAAV,GAAgB,KAAhB;;MAEA,IAAsB,MAAA,KAAU,KAAhC;QAAA,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,EAAf,EAAA;;aAEA;IAdG;;;AAgBL;;;;;;;;;;sBASA,GAAA,GAAK,SAAC,EAAD;AACH,UAAA;AAAA;AAAA;WAAA,qCAAA;;qBAAA,EAAA,CAAG,GAAH,EAAQ,IAAC,CAAA,KAAM,CAAA,GAAA,CAAf,EAAqB,IAAC,CAAA,QAAQ,CAAC,cAAV,CAAyB,GAAzB,CAArB;AAAA;;IADG;;;;KA/Ce;;EAkDtB,MAAM,CAAC,OAAP,GAAiB;AAnFjB","file":"Ordered/RuleMap.js","sourceRoot":"/source/","sourcesContent":["###\n© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\n# External dependencies.\nUnorderedRuleMap = require '../Unordered/RuleMap'\n\n###\n# # RuleMaps …\n# -----------------\n#\n# … look like “identifier: expression; identifier2: expression2”.\n# They provide a simplified implementation of RuleMap keeping the\n# initial order of all rules added.\n###\n\n###*\n# -------------\n# @class RuleMap\n# @namespace GoateeRules.Ordered\n###\nclass RuleMap extends UnorderedRuleMap\n\n  ###*\n  # -------------\n  # @param {Array}  [sequence]\n  # @param {Object} rules\n  # @param {Object} priority\n  # @constructor\n  ###\n  constructor: (@sequence = [], @rules, @priority) ->\n    super @rules, @priority\n\n  ###*\n  # -------------\n  # adds a new rule to this instance\n  #\n  # @method add\n  # @param  {String}  key\n  # @param  {mixed}   value\n  # @param  {Boolean} important\n  # @return {RuleMap}\n  ###\n  add: (key, value, important) ->\n\n    id     = @normalizeKey key\n    exists = @rules.hasOwnProperty(id)\n\n    return this unless important is true or \\\n                       exists is false or \\\n                       @priority.hasOwnProperty(id) is false\n\n    @rules[id]    = @normalizeValue value\n    @priority[id] = true if important is true\n\n    @sequence.push(id) if exists is false\n\n    this\n\n  ###*\n  # -------------\n  # Call fn for each rule's key, value and priority and return the resulting\n  # Array.\n  #\n  # @method map\n  # @param  {Function} fn\n  # @return {Array}\n  ###\n  map: (fn) ->\n    fn key, @rules[key], @priority.hasOwnProperty(key) for key in @sequence\n\nmodule.exports = RuleMap\n"]}